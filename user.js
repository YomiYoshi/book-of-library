const BASE_URL = 'http://localhost:8000'

function toggleHamburgerIcon(el) { //‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô icon ‡∏à‡∏≤‡∏Å 3 ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô X
  el.classList.toggle("change");
}

//‡∏ó‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏´‡∏≤ menu ‡πÉ‡∏ô icon ‡∏Ç‡∏µ‡∏î 3 ‡πÄ‡∏™‡πâ‡∏ô
const myMenu = document.getElementById('myMenu');
const hamIcon = document.getElementById('hamIcon');

hamIcon.addEventListener('click', function () {
  if (myMenu.style.display === 'block') {
    myMenu.style.display = 'none';
  } else {
    myMenu.style.display = 'block';
  }
});

/*‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Status*/
const updateStatus = async (book_id, status) => {
  try {
    console.log(`üîÑ Updating ID: ${book_id}, Status: ${status}`);

    if (!book_id || !status) {
      console.error("‚õî ID or Status is missing!");
      return;
    }

    await axios.put(`${BASE_URL}/users/${book_id}`, { status: status });

    const statusCell = document.getElementById(`status-${book_id}`);
    if (statusCell) {
      statusCell.textContent = status;
      statusCell.classList.remove("status-approved", "status-pending");
      if (status === "Borrowed") {
        statusCell.classList.add("status-approved");
      }
    } else {
      console.warn(`Element status-${book_id} not found`);
    }
  } catch (error) {
    console.error('Error update status', error);
  }
};

window.onload = async () => {
  await loadData()
}
const loadData = async () => {
  console.log('user page loaded')
  //1. load user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏à‡∏≤‡∏Å api ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ
  const response = await axios.get(`${BASE_URL}/users`)
  console.log(response.data)
  const bookDOM = document.getElementById('books')
  //2. ‡∏ô‡∏≥ user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô html


  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô database
  let htmlData = `
  <table border="1" cellspacing="1" cellpadding="10">
      <thead>
          <tr>
              <th>Book ID</th>
              <th>Title</th>
              <th>Author</th>
              <th>Publisher</th>
              <th>Publisher Year</th>
              <th>Category</th>
              <th>ISBM</th>
              <th>Page Count</th>
              <th>Status</th>
              <th>Action</th>
              <th>Borrow</th>
          </tr>
      </thead>
      <tbody>
  `;

  for (let i = 0; i < response.data.length; i++) {
    let users = response.data[i];
    htmlData += ` 
      <tr>
          <td>${users.book_id}</td>
          <td>${users.title}</td>
          <td>${users.author}</td>
          <td>${users.publisher}</td>
          <td>${users.publisher_year}</td>
          <td>${users.category || '-'}</td>
          <td>${users.isbn}</td>
          <td>${users.page_count}</td>
          <td id="status-${users.book_id}" class="status">${users.status || 'Available'}</td>
          <td>
          <a href="book_info.html?book_id=${users.book_id}"><button class='Edit'>Edit</button></a>
          <button class="delete" data-book_id="${users.book_id}">Delete</button>
          </td>

          <td>
          <a href="Result.html">
          <button class="borrow" data-book_id="${users.book_id}" data-status='Borrowed'><span class="material-symbols-outlined">
          login</span></button></a>
          </td>
      </tr>
    `;
  }

  htmlData += `
            </tbody>
        </table>
    `;
  bookDOM.innerHTML = htmlData;
  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô database(‡∏à‡∏ö)


  //3. ‡∏•‡∏ö user
  document.querySelectorAll('.delete').forEach(button => {
    button.addEventListener('click', async (event) => {
      const id = event.target.closest(".delete").dataset.book_id;
      if (!id) {
        console.error("Book_ID not found!");
        return;
      }
        try {
          await axios.delete(`${BASE_URL}/users/${id}`);
          console.log(`Deleted Book with ID: ${id}`);
          loadData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö
        } catch (error) {
          console.error("Error deleting Book:", error);
        }
    }
   )
  })

  // 4 ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const filterDOM = document.getElementById('filter')
  filterDOM.addEventListener('keyup', (event) => { // keyup = ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô input ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    const filterValue = event.target.value.toLowerCase() // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const rows = bookDOM.getElementsByTagName('tr')

    // ‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    for (let i = 1; i < rows.length; i++) {
      const cells = rows[i].getElementsByTagName('td') // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      let rowContainsFilterValue = false // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

      // ‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß
      for (let j = 0; j < cells.length; j++) {
        if (cells[j].innerText.toLowerCase().includes(filterValue)) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          rowContainsFilterValue = true
          break
        }
      }
      // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô
      rows[i].style.display = rowContainsFilterValue ? '' : 'none'
    }
  })

  /*5. ‡∏™‡∏£‡πâ‡∏≤‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•*/
  document.addEventListener('click', async (event) => {
    if (event.target.closest('.borrow')) {
        event.preventDefault();
        const button = event.target.closest('.borrow');
        const id = button.dataset.book_id;
        const status = button.dataset.status;
        console.log(`Borrow Clicked: ID=${id}, Status=${status}`);

        if (id && status) {
            await updateStatus(id, status);
            window.location.href = "Result.html"; // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Result.html ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        } else {
            console.error("Book_ID or Status not found!");
        }
    }
  })

}
